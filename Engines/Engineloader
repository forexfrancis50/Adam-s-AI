from collections import defaultdict
import random

# Load balancer class
class LoadBalancer:
    def __init__(self, num_experts):
        self.num_experts = num_experts
        self.expert_usage = defaultdict(int)
        self.max_load = 100  # Max queries per expert before rebalancing

    def select_expert(self, expert_scores):
        # Expert_scores: list of (expert_id, relevance_score) from router
        sorted_experts = sorted(expert_scores, key=lambda x: x[1], reverse=True)
        # Prefer less-loaded experts among top candidates
        for expert_id, score in sorted_experts[:3]:  # Top 3 experts
            if self.expert_usage[expert_id] < self.max_load:
                self.expert_usage[expert_id] += 1
                return expert_id
        # Fallback to highest-scoring expert
        selected_expert = sorted_experts[0][0]
        self.expert_usage[selected_expert] += 1
        return selected_expert

    def reset_usage(self):
        self.expert_usage.clear()

# Example usage
load_balancer = LoadBalancer(num_experts=50)
expert_scores = [(0, 0.9), (1, 0.85), (2, 0.7)]  # Simulated router scores
selected_expert = load_balancer.select_expert(expert_scores)
print(f"Selected expert: {selected_expert}")