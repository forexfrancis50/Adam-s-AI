{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPjqXIJNVNtTdtdAokl8plY",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "5095422b7b0a4120981f05ada0fc7a0a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_bf2b8a1890d64b979afe0c936749e734",
              "IPY_MODEL_9cdc6d10cf214dc5a0e4d1646ca2e976",
              "IPY_MODEL_4016fac5f7e44ef58a52483223d03fdd"
            ],
            "layout": "IPY_MODEL_f0d797321da3441aa1c500ac775a720c"
          }
        },
        "bf2b8a1890d64b979afe0c936749e734": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d2f7cdb840454ef799b9e6e9f30719cc",
            "placeholder": "​",
            "style": "IPY_MODEL_38c1efba823245728260292dd393cbec",
            "value": "Resolving data files: 100%"
          }
        },
        "9cdc6d10cf214dc5a0e4d1646ca2e976": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_016a1702f03f4eec8e1d0ee34df79483",
            "max": 100,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_b287dd02798a47d0b39716e9e550ae54",
            "value": 100
          }
        },
        "4016fac5f7e44ef58a52483223d03fdd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e644ed51175048cf835cda868a7896fe",
            "placeholder": "​",
            "style": "IPY_MODEL_0847af7bbf39433d8bf5953d8eeeeb23",
            "value": " 100/100 [00:00&lt;00:00, 3002.56it/s]"
          }
        },
        "f0d797321da3441aa1c500ac775a720c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d2f7cdb840454ef799b9e6e9f30719cc": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "38c1efba823245728260292dd393cbec": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "016a1702f03f4eec8e1d0ee34df79483": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b287dd02798a47d0b39716e9e550ae54": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "e644ed51175048cf835cda868a7896fe": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0847af7bbf39433d8bf5953d8eeeeb23": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "cf59bf333084493dad3b1c94d3e998bd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_c7e1c8441cc647829cdc90269af5622b",
              "IPY_MODEL_27614d971ada4556aa77ecb8fae13e1f",
              "IPY_MODEL_b1635499708e4102bfdbc4f6fba5bc92"
            ],
            "layout": "IPY_MODEL_4fbedd9e536044b2af9350335be43d06"
          }
        },
        "c7e1c8441cc647829cdc90269af5622b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_a94b8d526503404695f4e42d0f40e5de",
            "placeholder": "​",
            "style": "IPY_MODEL_a341796d0de3483caf0e955d271a300d",
            "value": "Map: 100%"
          }
        },
        "27614d971ada4556aa77ecb8fae13e1f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_beb968380c7d483a8528829c4782ffad",
            "max": 1229105,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_c7bf9bb0511545b5b9078941e5e0b5b9",
            "value": 1229105
          }
        },
        "b1635499708e4102bfdbc4f6fba5bc92": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c93819ffdfc045159dc5fbf450fb2350",
            "placeholder": "​",
            "style": "IPY_MODEL_555f4176e1d14b7ba47e8f9afaf4a46a",
            "value": " 1229105/1229105 [14:08&lt;00:00, 1645.51 examples/s]"
          }
        },
        "4fbedd9e536044b2af9350335be43d06": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a94b8d526503404695f4e42d0f40e5de": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a341796d0de3483caf0e955d271a300d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "beb968380c7d483a8528829c4782ffad": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c7bf9bb0511545b5b9078941e5e0b5b9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "c93819ffdfc045159dc5fbf450fb2350": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "555f4176e1d14b7ba47e8f9afaf4a46a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/forexfrancis50/Adam-s-AI/blob/main/200Booksdata\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AqI3WE-SpAji",
        "outputId": "9218d629-00e8-453a-ba06-d69dacac2bfd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting wikipedia\n",
            "  Downloading wikipedia-1.4.0.tar.gz (27 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.11/dist-packages (from wikipedia) (4.13.4)\n",
            "Requirement already satisfied: requests<3.0.0,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from wikipedia) (2.32.3)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0,>=2.0.0->wikipedia) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0,>=2.0.0->wikipedia) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0,>=2.0.0->wikipedia) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0,>=2.0.0->wikipedia) (2025.4.26)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4->wikipedia) (2.7)\n",
            "Requirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4->wikipedia) (4.13.2)\n",
            "Building wheels for collected packages: wikipedia\n",
            "  Building wheel for wikipedia (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for wikipedia: filename=wikipedia-1.4.0-py3-none-any.whl size=11678 sha256=9dfe3a64e456934449c0c7da3f4fe92768b0400c599bd5590e698ea17489b0c7\n",
            "  Stored in directory: /root/.cache/pip/wheels/8f/ab/cb/45ccc40522d3a1c41e1d2ad53b8f33a62f394011ec38cd71c6\n",
            "Successfully built wikipedia\n",
            "Installing collected packages: wikipedia\n",
            "Successfully installed wikipedia-1.4.0\n"
          ]
        }
      ],
      "source": [
        "!pip install wikipedia\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import wikipedia\n",
        "import pandas as pd\n",
        "import time\n"
      ],
      "metadata": {
        "id": "E93eyd_Apt5f"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import wikipediaapi\n",
        "import os\n",
        "from tqdm import tqdm\n",
        "\n",
        "# Create output directory\n",
        "output_dir = \"wikipedia_articles\"\n",
        "os.makedirs(output_dir, exist_ok=True)\n",
        "\n",
        "# Use English Wikipedia, and provide a descriptive user agent\n",
        "wiki_wiki = wikipediaapi.Wikipedia(\n",
        "    language='en',\n",
        "    user_agent='my_wikipedia_app/1.0 (my_email@example.com)' # Replace with your info\n",
        ")\n",
        "\n",
        "\n",
        "\n",
        "# Curated keywords across STEM, Econ, and Finance\n",
        "keywords = [\n",
        "    # Physics\n",
        "    \"Quantum mechanics\", \"Relativity\", \"Particle physics\", \"Thermodynamics\",\n",
        "    \"Statistical mechanics\", \"Nuclear physics\", \"Solid state physics\",\n",
        "\n",
        "    # Chemistry\n",
        "    \"Organic chemistry\", \"Inorganic chemistry\", \"Physical chemistry\", \"Analytical chemistry\",\n",
        "\n",
        "    # Biology\n",
        "    \"Cell biology\", \"Genetics\", \"Molecular biology\", \"Neuroscience\",\n",
        "\n",
        "    # Mathematics\n",
        "    \"Calculus\", \"Algebra\", \"Topology\", \"Set theory\", \"Number theory\", \"Mathematical logic\",\n",
        "\n",
        "    # Computer Science\n",
        "    \"Artificial intelligence\", \"Machine learning\", \"Algorithms\", \"Data structures\",\n",
        "    \"Cryptography\", \"Computational complexity theory\", \"Natural language processing\",\n",
        "\n",
        "    # Engineering\n",
        "    \"Electrical engineering\", \"Mechanical engineering\", \"Control systems\", \"Signal processing\",\n",
        "\n",
        "    # Economics & Finance\n",
        "    \"Macroeconomics\", \"Microeconomics\", \"Keynesian economics\", \"Supply and demand\",\n",
        "    \"Time value of money\", \"Derivatives (finance)\", \"Financial markets\", \"Investment\",\n",
        "    \"Risk management\", \"Game theory\", \"International economics\", \"Public finance\"\n",
        "]\n",
        "\n",
        "# Helper function\n",
        "def save_article(title, page):\n",
        "    if not page.exists():\n",
        "        return False\n",
        "    content = page.text\n",
        "    if len(content) < 2000:  # skip short/disambiguation articles\n",
        "        return False\n",
        "    filename = os.path.join(output_dir, f\"{title.replace(' ', '_')}.txt\")\n",
        "    with open(filename, \"w\", encoding=\"utf-8\") as f:\n",
        "        f.write(content)\n",
        "    return True\n",
        "\n",
        "# Main loop\n",
        "success_count = 0\n",
        "for keyword in tqdm(keywords):\n",
        "    page = wiki_wiki.page(keyword)\n",
        "    if save_article(keyword, page):\n",
        "        success_count += 1\n",
        "\n",
        "print(f\"✅ Downloaded {success_count} high-quality Wikipedia articles.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m_feUD1zpwg9",
        "outputId": "107f38f9-398a-4e1e-9011-f59acfc9199a"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 44/44 [00:18<00:00,  2.43it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Downloaded 42 high-quality Wikipedia articles.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a DataFrame from the collected data\n",
        "df = pd.DataFrame({\n",
        "    'Title': article_titles,\n",
        "    'Content': article_contents\n",
        "})\n",
        "\n",
        "# Save the DataFrame to a CSV file\n",
        "df.to_csv('wikipedia_articles.csv1', index=False)\n",
        "print(\"Saved collected articles to 'wikipedia_articles.csv1'\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zrNWEHa6py7z",
        "outputId": "38563827-51bb-49f1-98cc-2b025b6e4328"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saved collected articles to 'wikipedia_articles.csv1'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "import csv\n",
        "\n",
        "# URL for DOAB API (limited to 1,000 per request, pagination supported)\n",
        "BASE_URL = \"https://directory.doabooks.org/api/books\"\n",
        "\n",
        "# Query params (example: subjects like \"mathematics\", \"physics\", etc.)\n",
        "params = {\n",
        "    \"size\": 1000,\n",
        "    \"page\": 0,\n",
        "    \"language\": \"en\"\n",
        "}\n",
        "\n",
        "books = []\n",
        "\n",
        "while True:\n",
        "    res = requests.get(BASE_URL, params=params)\n",
        "    if res.status_code != 200:\n",
        "        print(\"Error:\", res.status_code)\n",
        "        break\n",
        "\n",
        "    data = res.json()\n",
        "    if not data.get(\"_embedded\"):\n",
        "        break\n",
        "\n",
        "    for book in data[\"_embedded\"][\"books\"]:\n",
        "        subjects = [s[\"value\"] for s in book.get(\"subjects\", [])]\n",
        "        if any(s in str(subjects).lower() for s in [\n",
        "            \"physics\", \"mathematics\", \"engineering\", \"biology\", \"economics\", \"finance\", \"computer science\"\n",
        "        ]):\n",
        "            books.append({\n",
        "                \"title\": book[\"title\"],\n",
        "                \"authors\": [a[\"name\"] for a in book.get(\"authors\", [])],\n",
        "                \"publisher\": book.get(\"publisher\", {}).get(\"name\"),\n",
        "                \"subjects\": subjects,\n",
        "                \"url\": book.get(\"openAccessUrl\", \"N/A\"),\n",
        "            })\n",
        "\n",
        "    if \"next\" not in data.get(\"_links\", {}):\n",
        "        break\n",
        "    params[\"page\"] += 1\n",
        "\n",
        "print(f\"📚 Retrieved {len(books)} open-access books.\")\n",
        "\n",
        "# Save to CSV\n",
        "with open(\"doab_books.csv\", \"w\", newline=\"\", encoding=\"utf-8\") as f:\n",
        "    writer = csv.DictWriter(f, fieldnames=books[0].keys())\n",
        "    writer.writeheader()\n",
        "    writer.writerows(books)\n",
        "\n",
        "print(\"✅ Books saved to doab_books.csv\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 245
        },
        "id": "pnwMfqPQuxUA",
        "outputId": "7c8c2d75-8c21-4a0d-e68f-37644b474e78"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error: 504\n",
            "📚 Retrieved 0 open-access books.\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "IndexError",
          "evalue": "list index out of range",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-9-20558172b55c>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     45\u001b[0m \u001b[0;31m# Save to CSV\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     46\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"doab_books.csv\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"w\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnewline\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mencoding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"utf-8\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 47\u001b[0;31m     \u001b[0mwriter\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcsv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDictWriter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfieldnames\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbooks\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeys\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     48\u001b[0m     \u001b[0mwriter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwriteheader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m     \u001b[0mwriter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwriterows\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbooks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mIndexError\u001b[0m: list index out of range"
          ]
        }
      ]
    },
    {
      "source": [
        "import requests\n",
        "import csv\n",
        "\n",
        "# DOAB API endpoint\n",
        "BASE_URL = \"https://directory.doabooks.org/api/books\"\n",
        "\n",
        "# Parameters for the API request\n",
        "params = {\n",
        "    \"size\": 100,     # Reduced to avoid timeouts; adjust as needed\n",
        "    \"page\": 1,       # Start at page 1 (assuming API uses 1-based indexing)\n",
        "    \"language\": \"en\" # English books only\n",
        "}\n",
        "\n",
        "books = []\n",
        "total_books_retrieved = 0\n",
        "\n",
        "while True:\n",
        "    try:\n",
        "        res = requests.get(BASE_URL, params=params, timeout=10)\n",
        "        if res.status_code != 200:\n",
        "            print(f\"Error: Received status code {res.status_code}\")\n",
        "            break\n",
        "\n",
        "        data = res.json()\n",
        "        if not data.get(\"_embedded\"):\n",
        "            print(\"No more books found in API response.\")\n",
        "            break\n",
        "\n",
        "        books_in_page = data[\"_embedded\"][\"books\"]\n",
        "        total_books_retrieved += len(books_in_page)\n",
        "        print(f\"Retrieved {len(books_in_page)} books from page {params['page']}\")\n",
        "\n",
        "        for book in books_in_page:\n",
        "            books.append({\n",
        "                \"title\": book[\"title\"],\n",
        "                \"authors\": \", \".join([a[\"name\"] for a in book.get(\"authors\", [])]),\n",
        "                \"publisher\": book.get(\"publisher\", {}).get(\"name\", \"N/A\"),\n",
        "                \"subjects\": \", \".join([s[\"value\"] for s in book.get(\"subjects\", [])]),\n",
        "                \"url\": book.get(\"openAccessUrl\", \"N/A\"),\n",
        "            })\n",
        "\n",
        "        # Move to next page if available\n",
        "        if \"next\" in data.get(\"_links\", {}):\n",
        "            params[\"page\"] += 1\n",
        "        else:\n",
        "            break\n",
        "\n",
        "    except requests.exceptions.Timeout:\n",
        "        print(\"Request timed out. Stopping retrieval.\")\n",
        "        break\n",
        "    except requests.exceptions.RequestException as e:\n",
        "        print(f\"Error occurred: {e}\")\n",
        "        break\n",
        "\n",
        "print(f\"Total books retrieved: {total_books_retrieved}\")\n",
        "\n",
        "# Save to CSV if books were found\n",
        "if books:\n",
        "    with open(\"doab_books.csv\", \"w\", newline=\"\", encoding=\"utf-8\") as f:\n",
        "        writer = csv.DictWriter(f, fieldnames=books[0].keys())\n",
        "        writer.writeheader()\n",
        "        writer.writerows(books)\n",
        "    print(\"✅ Books saved to doab_books.csv\")\n",
        "else:\n",
        "    print(\"⚠️ No books retrieved. CSV file not created.\")"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1pOODryk30Hp",
        "outputId": "0d5b2b26-b0ab-44c8-def2-cd22d88f6150"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Request timed out. Stopping retrieval.\n",
            "Total books retrieved: 0\n",
            "⚠️ No books retrieved. CSV file not created.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install gzip\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M2uJ03HJqy6g",
        "outputId": "f9c16b33-8c81-4943-df9d-30f2ed0d7413"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[31mERROR: Could not find a version that satisfies the requirement gzip (from versions: none)\u001b[0m\u001b[31m\n",
            "\u001b[0m\u001b[31mERROR: No matching distribution found for gzip\u001b[0m\u001b[31m\n",
            "\u001b[0m"
          ]
        }
      ]
    },
    {
      "source": [
        "import requests\n",
        "import csv\n",
        "import os\n",
        "from pathlib import Path\n",
        "import time\n",
        "\n",
        "# 1. Download and process the Gutenberg catalog\n",
        "catalog_url = \"https://www.gutenberg.org/cache/epub/feeds/pg_catalog.csv.gz\"\n",
        "response = requests.get(catalog_url)\n",
        "\n",
        "# Save and extract the catalog\n",
        "with open(\"pg_catalog.csv.gz\", \"wb\") as f:\n",
        "    f.write(response.content)\n",
        "\n",
        "import gzip\n",
        "with gzip.open(\"pg_catalog.csv.gz\", \"rt\", encoding=\"utf-8\") as f_in:\n",
        "    with open(\"pg_catalog.csv\", \"w\", encoding=\"utf-8\") as f_out:\n",
        "        f_out.write(f_in.read())\n",
        "\n",
        "# 2. Filter for non-fiction books in English\n",
        "non_fiction_books = []\n",
        "with open(\"pg_catalog.csv\", \"r\", encoding=\"utf-8\") as f:\n",
        "    reader = csv.DictReader(f)\n",
        "    for row in reader:\n",
        "        if row[\"Type\"] == \"Text\" and row[\"Language\"] == \"en\" and \"Fiction\" not in row[\"Subjects\"]:\n",
        "            non_fiction_books.append(row)\n",
        "            if len(non_fiction_books) >= 200:  # Limit to 200 books\n",
        "                break\n",
        "\n",
        "# 3. Create a directory to save the books\n",
        "save_dir = Path(\"gutenberg_books\")\n",
        "save_dir.mkdir(exist_ok=True)\n",
        "\n",
        "# 4. Download the books\n",
        "for i, book in enumerate(non_fiction_books, 1):\n",
        "    book_id = book[\"Text#\"]\n",
        "    url = f\"https://www.gutenberg.org/files/{book_id}/{book_id}-0.txt\"\n",
        "    try:\n",
        "        response = requests.get(url, timeout=10)\n",
        "        if response.status_code == 200:\n",
        "            with open(save_dir / f\"{book_id}.txt\", \"wb\") as f:\n",
        "                f.write(response.content)\n",
        "            print(f\"Downloaded book {i}/{len(non_fiction_books)}: {book['Title']}\")\n",
        "        else:\n",
        "            print(f\"Failed to download book {book_id}: Status {response.status_code}\")\n",
        "    except Exception as e:\n",
        "        print(f\"Error downloading book {book_id}: {e}\")\n",
        "    time.sleep(1)  # Be polite to the server\n",
        "\n",
        "print(f\"Total books downloaded: {len(non_fiction_books)}\")"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tPWdBH18rm7Q",
        "outputId": "44eedfe0-ac76-4460-ee2c-751429387981"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloaded book 1/200: The Declaration of Independence of the United States of America\n",
            "Failed to download book 2: Status 404\n",
            "Downloaded book 3/200: John F. Kennedy's Inaugural Address\n",
            "Failed to download book 4: Status 404\n",
            "Failed to download book 5: Status 404\n",
            "Failed to download book 6: Status 404\n",
            "Downloaded book 7/200: The Mayflower Compact\n",
            "Failed to download book 8: Status 404\n",
            "Downloaded book 9/200: Abraham Lincoln's First Inaugural Address\n",
            "Downloaded book 10/200: The King James Version of the Bible\n",
            "Downloaded book 11/200: Alice's Adventures in Wonderland\n",
            "Downloaded book 12/200: Through the Looking-Glass\n",
            "Downloaded book 13/200: The Hunting of the Snark: An Agony in Eight Fits\n",
            "Downloaded book 14/200: The 1990 CIA World Factbook\n",
            "Downloaded book 15/200: The Book of Mormon\n",
            "Downloaded book 16/200: The Federalist Papers\n",
            "Downloaded book 17/200: The Song of Hiawatha\n",
            "Downloaded book 18/200: Paradise Lost\n",
            "Downloaded book 19/200: Aesop's Fables\n",
            "Translated by George Fyler Townsend\n",
            "Downloaded book 20/200: Roget's Thesaurus\n",
            "Downloaded book 21/200: Narrative of the Life of Frederick Douglass, an American Slave\n",
            "Failed to download book 25: Status 404\n",
            "Downloaded book 23/200: Paradise Lost\n",
            "Downloaded book 24/200: The Fables of Aesop\n",
            "Selected, Told Anew, and Their History Traced\n",
            "Failed to download book 29: Status 404\n",
            "Downloaded book 26/200: The Bible, King James Version, Complete\n",
            "Downloaded book 27/200: Plays of Sophocles: Oedipus the King; Oedipus at Colonus; Antigone\n",
            "Failed to download book 34: Status 404\n",
            "Failed to download book 37: Status 404\n",
            "Failed to download book 38: Status 404\n",
            "Failed to download book 39: Status 404\n",
            "Failed to download book 40: Status 404\n",
            "Failed to download book 48: Status 404\n",
            "Failed to download book 49: Status 404\n",
            "Failed to download book 53: Status 404\n",
            "Downloaded book 36/200: The Marvelous Land of Oz\n",
            "Downloaded book 37/200: The Wonderful Wizard of Oz\n",
            "Failed to download book 56: Status 404\n",
            "Downloaded book 39/200: Aladdin and the Magic Lamp\n",
            "Downloaded book 40/200: Paradise Regained\n",
            "Downloaded book 41/200: Discourse on the Method of Rightly Conducting One's Reason and of Seeking Truth in the Sciences\n",
            "Downloaded book 42/200: The Communist Manifesto\n",
            "Failed to download book 63: Status 404\n",
            "Failed to download book 66: Status 404\n",
            "Failed to download book 67: Status 404\n",
            "Failed to download book 69: Status 404\n",
            "Downloaded book 47/200: What Is Man? and Other Essays\n",
            "Downloaded book 48/200: On the Duty of Civil Disobedience\n",
            "Failed to download book 75: Status 404\n",
            "Downloaded book 50/200: The Online World\n",
            "Failed to download book 87: Status 404\n",
            "Failed to download book 88: Status 404\n",
            "Failed to download book 89: Status 404\n",
            "Downloaded book 54/200: The Monster Men\n",
            "Downloaded book 55/200: Flatland: A Romance of Many Dimensions\n",
            "Downloaded book 56/200: Collected Articles of Frederick Douglass\n",
            "Downloaded book 57/200: The Complete Works of William Shakespeare\n",
            "Downloaded book 58/200: The Hacker Crackdown: Law and Disorder on the Electronic Frontier\n",
            "Downloaded book 59/200: Inaugural Address of Franklin Delano Roosevelt\n",
            "Given in Washington, D.C. March 4th, 1933\n",
            "Downloaded book 60/200: Renascence, and Other Poems\n",
            "Downloaded book 61/200: The Secret Garden\n",
            "Downloaded book 62/200: United States Census Figures Back to 1630\n",
            "Downloaded book 63/200: Symphony No. 5 in C minor Opus 67\n",
            "Downloaded book 64/200: Big Dummy's Guide to the Internet\n",
            "Downloaded book 65/200: Deuterocanonical Books of the Bible\n",
            "Apocrypha\n",
            "Downloaded book 66/200: The Arabian Nights Entertainments\n",
            "Downloaded book 67/200: Orthodoxy\n",
            "Downloaded book 68/200: The Art of War\n",
            "Downloaded book 69/200: A Child's Garden of Verses\n",
            "Downloaded book 70/200: Sara Crewe; Or, What Happened at Miss Minchin's Boarding School\n",
            "Downloaded book 71/200: George Sand: Some Aspects of Her Life and Writings\n",
            "Downloaded book 72/200: A Little Princess\n",
            "Being the whole story of Sara Crewe now told for the first time\n",
            "Downloaded book 73/200: Common Sense\n",
            "Downloaded book 74/200: The Autobiography of Benjamin Franklin\n",
            "Failed to download book 150: Status 404\n",
            "Failed to download book 151: Status 404\n",
            "Failed to download book 156: Status 404\n",
            "Failed to download book 162: Status 404\n",
            "Downloaded book 79/200: Flower Fables\n",
            "Downloaded book 80/200: American Hand Book of the Daguerreotype\n",
            "Failed to download book 168: Status 404\n",
            "Failed to download book 180: Status 404\n",
            "Failed to download book 181: Status 404\n",
            "Failed to download book 200: Status 404\n",
            "Downloaded book 85/200: Flatland: A Romance of Many Dimensions\n",
            "Downloaded book 86/200: My Bondage and My Freedom\n",
            "Downloaded book 87/200: Walden, and On The Duty Of Civil Disobedience\n",
            "Failed to download book 206: Status 404\n",
            "Failed to download book 207: Status 404\n",
            "Failed to download book 212: Status 404\n",
            "Downloaded book 91/200: The Man from Snowy River\n",
            "Failed to download book 214: Status 404\n",
            "Failed to download book 216: Status 404\n",
            "Downloaded book 94/200: At the Back of the North Wind\n",
            "Downloaded book 95/200: The Aeneid\n",
            "Failed to download book 230: Status 404\n",
            "Failed to download book 232: Status 404\n",
            "Failed to download book 234: Status 404\n",
            "Failed to download book 235: Status 404\n",
            "Downloaded book 100/200: The forged coupon, and other stories\n",
            "Downloaded book 101/200: Life on the Mississippi\n",
            "Failed to download book 246: Status 404\n",
            "Downloaded book 103/200: Webster's Unabridged Dictionary (1st 100 Pages)\n",
            "Downloaded book 104/200: Webster's Unabridged Dictionary (2nd 100 Pages)\n",
            "Downloaded book 105/200: French Cave Paintings\n",
            "Failed to download book 250: Status 404\n",
            "Failed to download book 251: Status 404\n",
            "Failed to download book 252: Status 404\n",
            "Failed to download book 253: Status 404\n",
            "Failed to download book 254: Status 404\n",
            "Failed to download book 255: Status 404\n",
            "Failed to download book 257: Status 404\n",
            "Failed to download book 258: Status 404\n",
            "Failed to download book 259: Status 404\n",
            "Downloaded book 115/200: An Introduction to the Study of Robert Browning's Poetry\n",
            "Failed to download book 261: Status 404\n",
            "Failed to download book 262: Status 404\n",
            "Failed to download book 263: Status 404\n",
            "Failed to download book 264: Status 404\n",
            "Downloaded book 120/200: The Life and Death of Cormac the Skald\n",
            "Downloaded book 121/200: Confessio Amantis; Or, Tales of the Seven Deadly Sins\n",
            "Downloaded book 122/200: Black Beauty\n",
            "Failed to download book 272: Status 404\n",
            "Failed to download book 273: Status 404\n",
            "Failed to download book 274: Status 404\n",
            "Failed to download book 275: Status 404\n",
            "Failed to download book 276: Status 404\n",
            "Failed to download book 277: Status 404\n",
            "Failed to download book 278: Status 404\n",
            "Failed to download book 279: Status 404\n",
            "Downloaded book 131/200: Records of a Family of Engineers\n",
            "Downloaded book 132/200: Father Damien: An Open Letter to the Reverend Dr. Hyde of Honolulu\n",
            "Downloaded book 133/200: Eothen; Or, Traces of Travel Brought Home from the East\n",
            "Failed to download book 288: Status 404\n",
            "Downloaded book 135/200: The Stark Munro Letters\n",
            "Being series of twelve letters written by J. Stark Munro, M.B., to his friend and former fellow-student, Herbert Swanborough, of Lowell, Massachusetts, during the years 1881-1884\n",
            "Downloaded book 136/200: The Cash Boy\n",
            "Failed to download book 300: Status 404\n",
            "Failed to download book 301: Status 404\n",
            "Failed to download book 302: Status 404\n",
            "Failed to download book 303: Status 404\n",
            "Failed to download book 304: Status 404\n",
            "Failed to download book 309: Status 404\n",
            "Failed to download book 312: Status 404\n",
            "Failed to download book 313: Status 404\n",
            "Failed to download book 314: Status 404\n",
            "Failed to download book 315: Status 404\n",
            "Downloaded book 147/200: The Golden Road\n",
            "Failed to download book 317: Status 404\n",
            "Failed to download book 318: Status 404\n",
            "Downloaded book 150/200: The Ways of Men\n",
            "Downloaded book 151/200: Verses 1889-1896\n",
            "Downloaded book 152/200: Phantastes: A Faerie Romance for Men and Women\n",
            "Downloaded book 153/200: Steep Trails\n",
            "Failed to download book 328: Status 404\n",
            "Downloaded book 155/200: The Mucker\n",
            "Failed to download book 333: Status 404\n",
            "Downloaded book 157/200: Indian Heroes and Great Chieftains\n",
            "Downloaded book 158/200: Indian Boyhood\n",
            "Downloaded book 159/200: Old Indian Legends\n",
            "Downloaded book 160/200: The Soul of the Indian: An Interpretation\n",
            "Downloaded book 161/200: Myths and Legends of the Sioux\n",
            "Downloaded book 162/200: Margaret Ogilvy\n",
            "Downloaded book 163/200: Hesiod, the Homeric Hymns, and Homerica\n",
            "Failed to download book 353: Status 404\n",
            "Failed to download book 354: Status 404\n",
            "Downloaded book 166/200: Good Stories for Great Holidays\n",
            "Arranged for Story-Telling and Reading Aloud and for the Children's Own Reading\n",
            "Failed to download book 360: Status 404\n",
            "Downloaded book 168/200: The Oakdale Affair\n",
            "Failed to download book 365: Status 404\n",
            "Downloaded book 170/200: Acres of Diamonds: Our Every-day Opportunities\n",
            "Failed to download book 371: Status 404\n",
            "Downloaded book 172/200: Lay Morals, and Other Papers\n",
            "Failed to download book 374: Status 404\n",
            "Failed to download book 377: Status 404\n",
            "Failed to download book 379: Status 404\n",
            "Downloaded book 176/200: Memories and Portraits\n",
            "Downloaded book 177/200: Edinburgh: Picturesque Notes\n",
            "Downloaded book 178/200: She Stoops to Conquer; Or, The Mistakes of a Night: A Comedy\n",
            "Downloaded book 179/200: Virginibus Puerisque, and Other Papers\n",
            "Downloaded book 180/200: Vailima Letters\n",
            "Being Correspondence Addressed by Robert Louis Stevenson to Sidney Colvin, November 1890-October 1894\n",
            "Downloaded book 181/200: The Great God Pan\n",
            "Failed to download book 390: Status 404\n",
            "Failed to download book 391: Status 404\n",
            "Downloaded book 184/200: Jerusalem Delivered\n",
            "Failed to download book 397: Status 404\n",
            "Failed to download book 398: Status 404\n",
            "Downloaded book 187/200: Cast Upon the Breakers\n",
            "Failed to download book 400: Status 404\n",
            "Failed to download book 404: Status 404\n",
            "Failed to download book 405: Status 404\n",
            "Failed to download book 406: Status 404\n",
            "Downloaded book 192/200: The Souls of Black Folk\n",
            "Failed to download book 409: Status 404\n",
            "Failed to download book 412: Status 404\n",
            "Downloaded book 195/200: Ballads\n",
            "Failed to download book 414: Status 404\n",
            "Downloaded book 197/200: The Bible in Spain\n",
            "Or, the Journeys, Adventures, and Imprisonments of an Englishman, in an Attempt to Circulate the Scriptures in the Peninsula\n",
            "Failed to download book 418: Status 404\n",
            "Failed to download book 419: Status 404\n",
            "Failed to download book 420: Status 404\n",
            "Total books downloaded: 200\n"
          ]
        }
      ]
    },
    {
      "source": [
        "from transformers import AutoTokenizer, AutoModelForSeq2SeqLM, TrainingArguments, Trainer\n",
        "from datasets import load_dataset\n",
        "import os\n",
        "\n",
        "# 1. Prepare the dataset\n",
        "# Assuming you have a directory named 'gutenberg_books' with the downloaded .txt files\n",
        "\n",
        "def load_books(data_dir):\n",
        "    data = []\n",
        "    for filename in os.listdir(data_dir):\n",
        "        if filename.endswith(\".txt\"):\n",
        "            with open(os.path.join(data_dir, filename), \"r\", encoding=\"utf-8\") as f:\n",
        "                text = f.read()\n",
        "                data.append({\"text\": text})\n",
        "    return data\n",
        "\n",
        "books_dataset = load_dataset(\"text\", data_files={\"train\": \"gutenberg_books/*.txt\"})\n",
        "\n",
        "# 2. Tokenization\n",
        "model_name = \"google/mt5-small\"\n",
        "tokenizer = AutoTokenizer.from_pretrained(model_name)\n",
        "\n",
        "def preprocess_function(examples):\n",
        "    # Tokenize both input and target text\n",
        "    inputs = tokenizer(examples[\"text\"], padding=\"max_length\", truncation=True, max_length=512)\n",
        "    # For MT5, we need to add a prefix to the target text\n",
        "    # Assuming 'text' is both the input and target for this example\n",
        "    with tokenizer.as_target_tokenizer():\n",
        "        targets = tokenizer(examples[\"text\"], padding=\"max_length\", truncation=True, max_length=512)\n",
        "\n",
        "    inputs[\"labels\"] = targets[\"input_ids\"] # Use 'labels' for decoder_input_ids\n",
        "    return inputs\n",
        "\n",
        "\n",
        "tokenized_books = books_dataset.map(preprocess_function, batched=True) #Calling map to create tokenized_books\n",
        "\n",
        "# 3. Fine-tuning\n",
        "model = AutoModelForSeq2SeqLM.from_pretrained(model_name)\n",
        "\n",
        "training_args = TrainingArguments(\n",
        "    output_dir=\"./mt5_finetuned\",\n",
        "    per_device_train_batch_size=4,  # Adjust based on your GPU memory\n",
        "    gradient_accumulation_steps=4,  # Adjust based on your GPU memory\n",
        "    num_train_epochs=3,  # Adjust as needed\n",
        "    fp16=True,  # Enable mixed precision training if your GPU supports it\n",
        "    logging_dir=\"./logs\",\n",
        "    learning_rate=2e-5,\n",
        "    weight_decay=0.01,\n",
        "    save_total_limit=2,\n",
        ")\n",
        "\n",
        "trainer = Trainer(\n",
        "    model=model,\n",
        "    args=training_args,\n",
        "    train_dataset=tokenized_books[\"train\"],\n",
        ")\n",
        "\n",
        "trainer.train()\n",
        "\n",
        "# 4. Save the fine-tuned model\n",
        "trainer.save_model(\"./mt5_finetuned\")"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 188,
          "referenced_widgets": [
            "5095422b7b0a4120981f05ada0fc7a0a",
            "bf2b8a1890d64b979afe0c936749e734",
            "9cdc6d10cf214dc5a0e4d1646ca2e976",
            "4016fac5f7e44ef58a52483223d03fdd",
            "f0d797321da3441aa1c500ac775a720c",
            "d2f7cdb840454ef799b9e6e9f30719cc",
            "38c1efba823245728260292dd393cbec",
            "016a1702f03f4eec8e1d0ee34df79483",
            "b287dd02798a47d0b39716e9e550ae54",
            "e644ed51175048cf835cda868a7896fe",
            "0847af7bbf39433d8bf5953d8eeeeb23",
            "cf59bf333084493dad3b1c94d3e998bd",
            "c7e1c8441cc647829cdc90269af5622b",
            "27614d971ada4556aa77ecb8fae13e1f",
            "b1635499708e4102bfdbc4f6fba5bc92",
            "4fbedd9e536044b2af9350335be43d06",
            "a94b8d526503404695f4e42d0f40e5de",
            "a341796d0de3483caf0e955d271a300d",
            "beb968380c7d483a8528829c4782ffad",
            "c7bf9bb0511545b5b9078941e5e0b5b9",
            "c93819ffdfc045159dc5fbf450fb2350",
            "555f4176e1d14b7ba47e8f9afaf4a46a"
          ]
        },
        "id": "GzOPGbpBs9W_",
        "outputId": "22a9df77-7005-4a5b-d1d5-cb7128fb8b06"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Resolving data files:   0%|          | 0/100 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "5095422b7b0a4120981f05ada0fc7a0a"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/transformers/convert_slow_tokenizer.py:559: UserWarning: The sentencepiece tokenizer that you are converting to a fast tokenizer uses the byte fallback option which is not implemented in the fast tokenizers. In practice this means that the fast version of the tokenizer can produce unknown tokens whereas the sentencepiece version would have converted these unknown tokens into a sequence of byte tokens matching the original piece of text.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Map:   0%|          | 0/1229105 [00:00<?, ? examples/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "cf59bf333084493dad3b1c94d3e998bd"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/transformers/tokenization_utils_base.py:3980: UserWarning: `as_target_tokenizer` is deprecated and will be removed in v5 of Transformers. You can tokenize your labels by using the argument `text_target` of the regular `__call__` method (either in the same call as your input texts if you use the same keyword arguments, or in a separate call.\n",
            "  warnings.warn(\n",
            "Passing a tuple of `past_key_values` is deprecated and will be removed in Transformers v4.48.0. You should pass an instance of `EncoderDecoderCache` instead, e.g. `past_key_values=EncoderDecoderCache.from_legacy_cache(past_key_values)`.\n"
          ]
        }
      ]
    }
  ]
}