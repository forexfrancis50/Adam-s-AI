{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyNxOZ6r2jSGJWrgS7qlowTo",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/forexfrancis50/Adam-s-AI/blob/main/PRO%20Docs\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "TKco_htoe7Ff",
        "outputId": "c26bbf4f-9f31-40bb-f22c-5925695dfbe2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found existing installation: transformers 4.51.0\n",
            "Uninstalling transformers-4.51.0:\n",
            "  Successfully uninstalled transformers-4.51.0\n",
            "Collecting transformers==4.51.0\n",
            "  Using cached transformers-4.51.0-py3-none-any.whl.metadata (38 kB)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from transformers==4.51.0) (3.17.0)\n",
            "Requirement already satisfied: huggingface-hub<1.0,>=0.30.0 in /usr/local/lib/python3.11/dist-packages (from transformers==4.51.0) (0.31.1)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from transformers==4.51.0) (1.26.4)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from transformers==4.51.0) (24.2)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from transformers==4.51.0) (6.0.2)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers==4.51.0) (2024.11.6)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from transformers==4.51.0) (2.32.3)\n",
            "Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.11/dist-packages (from transformers==4.51.0) (0.21.0)\n",
            "Requirement already satisfied: safetensors>=0.4.3 in /usr/local/lib/python3.11/dist-packages (from transformers==4.51.0) (0.5.3)\n",
            "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.11/dist-packages (from transformers==4.51.0) (4.67.1)\n",
            "Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.30.0->transformers==4.51.0) (2024.10.0)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.30.0->transformers==4.51.0) (4.12.2)\n",
            "Requirement already satisfied: hf-xet<2.0.0,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.30.0->transformers==4.51.0) (1.1.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->transformers==4.51.0) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->transformers==4.51.0) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->transformers==4.51.0) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->transformers==4.51.0) (2025.1.31)\n",
            "Using cached transformers-4.51.0-py3-none-any.whl (10.4 MB)\n",
            "Installing collected packages: transformers\n",
            "Successfully installed transformers-4.51.0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.colab-display-data+json": {
              "pip_warning": {
                "packages": [
                  "transformers"
                ]
              },
              "id": "7438a2a9e8f74c7393d3ee9d11bb9895"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: datasets in /usr/local/lib/python3.11/dist-packages (3.6.0)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from datasets) (3.17.0)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from datasets) (1.26.4)\n",
            "Requirement already satisfied: pyarrow>=15.0.0 in /usr/local/lib/python3.11/dist-packages (from datasets) (18.1.0)\n",
            "Requirement already satisfied: dill<0.3.9,>=0.3.0 in /usr/local/lib/python3.11/dist-packages (from datasets) (0.3.8)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (from datasets) (2.2.2)\n",
            "Requirement already satisfied: requests>=2.32.2 in /usr/local/lib/python3.11/dist-packages (from datasets) (2.32.3)\n",
            "Requirement already satisfied: tqdm>=4.66.3 in /usr/local/lib/python3.11/dist-packages (from datasets) (4.67.1)\n",
            "Requirement already satisfied: xxhash in /usr/local/lib/python3.11/dist-packages (from datasets) (3.5.0)\n",
            "Requirement already satisfied: multiprocess<0.70.17 in /usr/local/lib/python3.11/dist-packages (from datasets) (0.70.16)\n",
            "Requirement already satisfied: fsspec<=2025.3.0,>=2023.1.0 in /usr/local/lib/python3.11/dist-packages (from fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (2024.10.0)\n",
            "Requirement already satisfied: huggingface-hub>=0.24.0 in /usr/local/lib/python3.11/dist-packages (from datasets) (0.31.1)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from datasets) (24.2)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from datasets) (6.0.2)\n",
            "Requirement already satisfied: aiohttp!=4.0.0a0,!=4.0.0a1 in /usr/local/lib/python3.11/dist-packages (from fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (3.11.13)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.24.0->datasets) (4.12.2)\n",
            "Requirement already satisfied: hf-xet<2.0.0,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.24.0->datasets) (1.1.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets) (2025.1.31)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2025.1)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2025.1)\n",
            "Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (2.4.6)\n",
            "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (1.3.2)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (25.1.0)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (1.5.0)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (6.1.0)\n",
            "Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (0.3.0)\n",
            "Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (1.18.3)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas->datasets) (1.17.0)\n"
          ]
        }
      ],
      "source": [
        "# Fully reset environment\n",
        "!pip uninstall -y transformers\n",
        "!pip install transformers==4.51.0\n",
        "!pip install datasets\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from transformers import TrainingArguments\n",
        "print(TrainingArguments.__module__)\n",
        "print(\"✅\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IvHe0nlgfi42",
        "outputId": "a883db12-6070-4e71-cdee-a9aa29d76d0c"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "transformers.training_args\n",
            "✅\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install beautifulsoup4 html2text requests\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AVz92ri7gE5f",
        "outputId": "e4e17df7-da1d-4b27-f474-0dbf792989e0"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.11/dist-packages (4.13.3)\n",
            "Requirement already satisfied: html2text in /usr/local/lib/python3.11/dist-packages (2025.4.15)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (2.32.3)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4) (2.6)\n",
            "Requirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4) (4.12.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests) (2025.1.31)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!mkdir -p programming_docs"
      ],
      "metadata": {
        "id": "mYPWsOKGgJ-N"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "import html2text\n",
        "from bs4 import BeautifulSoup\n",
        "import os\n",
        "\n",
        "# Language-specific doc URLs (simplified for crawlable pages)\n",
        "DOC_SOURCES = {\n",
        "    \"Python\": \"https://docs.python.org/3/\",\n",
        "    \"JavaScript\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide\",\n",
        "    \"Go\": \"https://go.dev/doc/effective_go\",\n",
        "    \"Rust\": \"https://doc.rust-lang.org/book/\",\n",
        "    \"C++\": \"https://en.cppreference.com/w/cpp\",\n",
        "    \"Java\": \"https://docs.oracle.com/javase/tutorial/\",\n",
        "    \"Shell\": \"https://www.gnu.org/software/bash/manual/bash.html\",\n",
        "    \"TypeScript\": \"https://www.typescriptlang.org/docs/handbook/intro.html\"\n",
        "}\n",
        "\n",
        "def fetch_doc(url):\n",
        "    print(f\"Fetching: {url}\")\n",
        "    try:\n",
        "        r = requests.get(url, timeout=10)\n",
        "        r.raise_for_status()\n",
        "        soup = BeautifulSoup(r.text, \"html.parser\")\n",
        "        article_text = html2text.html2text(soup.get_text())\n",
        "        return article_text\n",
        "    except Exception as e:\n",
        "        print(f\"Failed to fetch {url}: {e}\")\n",
        "        return None\n",
        "\n",
        "def save_doc(text, filename):\n",
        "    path = os.path.join(\"programming_docs\", filename)\n",
        "    with open(path, \"w\", encoding=\"utf-8\") as f:\n",
        "        f.write(text)\n",
        "    print(f\"Saved to {path}\")\n",
        "\n",
        "# Download and save docs\n",
        "for lang, url in DOC_SOURCES.items():\n",
        "    doc = fetch_doc(url)\n",
        "    if doc:\n",
        "        save_doc(doc, f\"{lang.lower().replace(' ', '_')}.txt\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RMElPdkbgdb_",
        "outputId": "a745588c-3e38-462f-f50d-1ad11c03be55"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fetching: https://docs.python.org/3/\n",
            "Saved to programming_docs/python.txt\n",
            "Fetching: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide\n",
            "Saved to programming_docs/javascript.txt\n",
            "Fetching: https://go.dev/doc/effective_go\n",
            "Saved to programming_docs/go.txt\n",
            "Fetching: https://doc.rust-lang.org/book/\n",
            "Saved to programming_docs/rust.txt\n",
            "Fetching: https://en.cppreference.com/w/cpp\n",
            "Saved to programming_docs/c++.txt\n",
            "Fetching: https://docs.oracle.com/javase/tutorial/\n",
            "Saved to programming_docs/java.txt\n",
            "Fetching: https://www.gnu.org/software/bash/manual/bash.html\n",
            "Failed to fetch https://www.gnu.org/software/bash/manual/bash.html: HTTPSConnectionPool(host='www.gnu.org', port=443): Max retries exceeded with url: /software/bash/manual/bash.html (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x7c1a76604a90>: Failed to establish a new connection: [Errno 111] Connection refused'))\n",
            "Fetching: https://www.typescriptlang.org/docs/handbook/intro.html\n",
            "Saved to programming_docs/typescript.txt\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def load_texts(data_dir, chars_per_chunk=1000):\n",
        "    chunks = []\n",
        "    for fname in os.listdir(data_dir):\n",
        "        if fname.endswith(\".txt\"):\n",
        "            with open(os.path.join(data_dir, fname), \"r\", encoding=\"utf-8\") as f:\n",
        "                text = f.read().strip()\n",
        "                for i in range(0, len(text), chars_per_chunk):\n",
        "                    chunk = text[i:i+chars_per_chunk].strip()\n",
        "                    if chunk:\n",
        "                        chunks.append(chunk)\n",
        "    print(f\"📘 Loaded {len(chunks)} text chunks.\")\n",
        "    return chunks\n"
      ],
      "metadata": {
        "id": "461vM1jljyY_"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "texts = load_texts(\"programming_docs\")\n",
        "print(f\"Loaded {len(texts)} text chunks.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qfrt0XYnhvkr",
        "outputId": "1024efb1-d174-4187-d018-f62c1303113f"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📘 Loaded 607 text chunks.\n",
            "Loaded 607 text chunks.\n"
          ]
        }
      ]
    },
    {
      "source": [
        "import os\n",
        "from transformers import T5ForConditionalGeneration, T5Tokenizer, Trainer, TrainingArguments\n",
        "from datasets import Dataset\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Use T5Tokenizer to match model class\n",
        "tokenizer = T5Tokenizer.from_pretrained(\"google/mt5-small\")\n",
        "model = T5ForConditionalGeneration.from_pretrained(\"google/mt5-small\")  # Use T5ForConditionalGeneration\n",
        "\n",
        "def load_texts(data_dir, chars_per_chunk=1000):\n",
        "    chunks = []\n",
        "    for fname in os.listdir(data_dir):\n",
        "        if fname.endswith(\".txt\"):\n",
        "            with open(os.path.join(data_dir, fname), \"r\", encoding=\"utf-8\") as f:\n",
        "                text = f.read().strip()\n",
        "                for i in range(0, len(text), chars_per_chunk):\n",
        "                    chunk = text[i:i + chars_per_chunk].strip()\n",
        "                    if chunk:\n",
        "                        chunks.append(chunk)\n",
        "    print(f\"📘 Loaded {len(chunks)} text chunks.\")\n",
        "    return chunks\n",
        "\n",
        "\n",
        "def preprocess(texts, max_len=512):\n",
        "    encodings = tokenizer(texts, padding=\"max_length\", truncation=True, max_length=max_len)\n",
        "    labels = []\n",
        "    for ids in encodings[\"input_ids\"]:\n",
        "        label = [token if token != tokenizer.pad_token_id else -100 for token in ids]\n",
        "        labels.append(label)\n",
        "    encodings[\"labels\"] = labels\n",
        "    return encodings\n",
        "\n",
        "\n",
        "def make_dataset(encodings):\n",
        "    return Dataset.from_dict({\n",
        "        \"input_ids\": encodings[\"input_ids\"],\n",
        "        \"attention_mask\": encodings[\"attention_mask\"],\n",
        "        \"labels\": encodings[\"labels\"]\n",
        "    })\n",
        "\n",
        "\n",
        "def train_model(train_ds, val_ds):\n",
        "    args = TrainingArguments(\n",
        "        output_dir=\"./results\",\n",
        "        do_eval=True,\n",
        "        learning_rate=2e-5,\n",
        "        per_device_train_batch_size=4,\n",
        "        per_device_eval_batch_size=4,\n",
        "        num_train_epochs=5,\n",
        "        weight_decay=0.01,\n",
        "        logging_dir=\"./logs\",\n",
        "        logging_steps=100,\n",
        "        save_steps=250,\n",
        "    )\n",
        "\n",
        "    trainer = Trainer(\n",
        "        model=model,\n",
        "        args=args,\n",
        "        train_dataset=train_ds,\n",
        "        eval_dataset=val_ds,\n",
        "    )\n",
        "\n",
        "    trainer.train()\n",
        "    print(\"✅ Training complete.\")\n",
        "\n",
        "\n",
        "# === Main ===\n",
        "data_dir = \"programming_docs\"\n",
        "texts = load_texts(data_dir)\n",
        "if len(texts) < 2:\n",
        "    raise ValueError(\"❌ Not enough text chunks to train — add more .txt files to 'programming_docs'.\")\n",
        "\n",
        "train_texts, val_texts = train_test_split(texts, test_size=0.25, random_state=42)\n",
        "train_enc = preprocess(train_texts)\n",
        "val_enc = preprocess(val_texts)\n",
        "\n",
        "train_ds = make_dataset(train_enc)\n",
        "val_ds = make_dataset(val_enc)\n",
        "\n",
        "print(f\"📊 Training on {len(train_ds)} samples, validating on {len(val_ds)}.\")\n",
        "train_model(train_ds, val_ds)"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 322
        },
        "id": "ApL98Y8Nk5nr",
        "outputId": "4741d69f-25fa-49ec-a853-f65351308c0a"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "You are using a model of type mt5 to instantiate a model of type t5. This is not supported for all configurations of models and can yield errors.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📘 Loaded 607 text chunks.\n",
            "📊 Training on 455 samples, validating on 152.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "    <div>\n",
              "      \n",
              "      <progress value='570' max='570' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
              "      [570/570 09:58, Epoch 5/5]\n",
              "    </div>\n",
              "    <table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              " <tr style=\"text-align: left;\">\n",
              "      <th>Step</th>\n",
              "      <th>Training Loss</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <td>100</td>\n",
              "      <td>17.553600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>200</td>\n",
              "      <td>10.861300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>300</td>\n",
              "      <td>7.885900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>400</td>\n",
              "      <td>5.882500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>500</td>\n",
              "      <td>4.892300</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table><p>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Training complete.\n"
          ]
        }
      ]
    }
  ]
}